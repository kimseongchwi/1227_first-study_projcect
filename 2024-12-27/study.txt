* 객체, 배열 쪽 보면서 공부한 것 정리

대괄호 표기법이라는 방법으로 공백이 있는 프로퍼티를 감싼다. ex) user["likes birds"]

변수에 키도 사용 가능하다. ex) let key = "likes birds"  user[key] = true;

키는 대괄호 표기법은 가능하지만 점 표기법은 불가능하다.

변수를 사용해 프로퍼티를 만드는 경우 간단하게 만드는 단축 프로퍼티는는 name:name 말고 name만 해도 되며 일반과 단축 함께 사용가능하다.

__proto__ 는 특별 대우를 받는 이름으로 숫자를 할당해도 값이 적용되지 않는다.

정수는 자동 정렬, 그 외의는 객체에 추가한 순서 그대로 정렬된다.

객체가 할당된 변수를 복사할 땐 객체의 참조 값이 복사되고 객체는 복사되지 않는다. ex) user = name: "John" // admin = user (이때 admin은 John이 아님)

참조에 의한 비교에서 a에 값을 b로 복사하지 않는한 독립된 두 객체이므로 값이 같지 않다.

가비지 컬렉션의 기준으로로 어떻게든 접근하거나 사용할 수 있는 값을 의미하며 메모리에서 삭제되지 않는다.

메서드는 할당된 함수 곧 할수 있는 행동을 의미

this는 현재 객체 곧 나 자신을 의미한다. 

this 대신 외부 변수를 참조해 객체에 접근한느 가능하나 에러가 발생하기에 null 값을 참조한다.

자유로운 this는 함수가 어디서 만들어진 것인지는 중요하지 않고 누가 이 함수를 사용하느냐에 따라 달라진다.

화살표 함수는 자신이 만들어진 곳의 장소만 기억하여 다른 곳에서 언급되고 값이 바뀌지 않는다.